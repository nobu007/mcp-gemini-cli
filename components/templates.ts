export interface CustomInstructionTemplate {
  id: string;
  title: string;
  description: string;
  instruction: string;
  category:
    | "development"
    | "debugging"
    | "refactoring"
    | "architecture"
    | "ci-cd"
    | "testing"
    | "security"
    | "performance"
    | "documentation"
    | "maintenance";
  tags: string[];
  directions?: string[];
}

export const customInstructionTemplates: CustomInstructionTemplate[] = [
  // Development Templates
  {
    id: "code-structure-analysis",
    title: "コード構造分析・改善提案",
    description:
      "プロジェクト全体のコード構造を分析し、設計パターンとアーキテクチャの改善を提案します",
    instruction: `プロジェクトのコード構造を詳細に分析し、以下の観点から改善提案を行ってください：

1. アーキテクチャパターンの評価：
   - 現在の設計パターンの適切性
   - MVCやMVVMなどのパターン適用状況
   - レイヤー分離の評価
   - 依存関係の方向性チェック

2. コード組織の分析：
   - ディレクトリ構造の妥当性
   - ファイル・モジュール分割の適切性
   - 責任の分離状況
   - コードの重複箇所特定

3. 設計原則の適用状況：
   - SOLID原則の遵守状況
   - DRY原則の適用度
   - 単一責任の原則
   - オープン・クローズド原則

4. 改善提案の策定：
   - 具体的なリファクタリング案
   - 段階的な改善計画
   - 影響範囲とリスク評価
   - 実装優先度の設定

各改善提案について、現状の問題点、改善後の利点、実装の複雑さを明確に説明してください。`,
    category: "development",
    tags: ["architecture", "design-patterns", "code-organization", "refactoring"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "長期保守性を重視して",
      "チーム開発を考慮して",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "api-design-review",
    title: "API設計レビュー・改善",
    description:
      "RESTful APIやGraphQL APIの設計を評価し、一貫性と使いやすさを向上させます",
    instruction: `プロジェクトのAPI設計を包括的にレビューし、以下の観点から改善してください：

1. API設計原則の評価：
   - RESTful設計原則の遵守状況
   - エンドポイントの命名規則
   - HTTPメソッドの適切な使用
   - ステータスコードの一貫性

2. データ構造とスキーマ：
   - リクエスト・レスポンス形式の統一性
   - データバリデーションの実装状況
   - エラーレスポンスの標準化
   - ページネーションの実装

3. セキュリティとパフォーマンス：
   - 認証・認可の実装方法
   - レート制限の設定
   - キャッシュ戦略
   - N+1問題の対策

4. 開発者体験の向上：
   - APIドキュメントの品質
   - SDKや型定義の提供
   - エラーメッセージの分かりやすさ
   - テスト環境の提供

各APIエンドポイントを分析し、改善案とベストプラクティスの適用方法を提示してください。`,
    category: "development",
    tags: ["api", "rest", "graphql", "design", "documentation"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "開発者体験を重視して",
      "セキュリティを考慮して",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "feature-implementation-guide",
    title: "新機能実装ガイド作成",
    description:
      "新しい機能の実装手順を詳細に計画し、段階的な開発アプローチを提案します",
    instruction: `指定された新機能の実装について、詳細な実装ガイドを作成してください：

1. 要件分析と設計：
   - 機能要件の明確化
   - 非機能要件の特定
   - ユーザーストーリーの作成
   - 技術的制約の確認

2. アーキテクチャ設計：
   - システム全体への影響分析
   - 新規コンポーネントの設計
   - 既存システムとの統合方法
   - データベース設計の変更

3. 実装計画：
   - 開発タスクの分解
   - 実装順序の最適化
   - 依存関係の整理
   - リスクの特定と対策

4. テスト戦略：
   - ユニットテスト計画
   - 統合テスト設計
   - E2Eテストシナリオ
   - パフォーマンステスト

5. デプロイメント計画：
   - 段階的リリース戦略
   - フィーチャーフラグの活用
   - ロールバック計画
   - 監視・モニタリング設定

実装の各段階で必要な成果物と品質基準を明確に定義してください。`,
    category: "development",
    tags: ["feature", "implementation", "planning", "architecture"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "リスク管理を重視して",
      "品質保証を考慮して",
      "検討のみをドキュメントに記録",
    ],
  },

  // Debugging Templates
  {
    id: "production-issue-investigation",
    title: "本番環境問題調査・解決",
    description:
      "本番環境で発生している問題を体系的に調査し、根本原因を特定して解決策を提案します",
    instruction: `本番環境で発生している問題について、以下の手順で調査・解決を進めてください：

1. 問題の詳細把握：
   - 症状の正確な記録
   - 発生頻度とタイミング
   - 影響範囲の特定
   - 再現条件の調査

2. ログとメトリクス分析：
   - アプリケーションログの解析
   - システムメトリクスの確認
   - エラーログの詳細分析
   - パフォーマンス指標の検証

3. 根本原因分析：
   - 5-Why分析の実施
   - フィッシュボーン図による要因分析
   - タイムライン分析
   - 仮説立案と検証

4. 解決策の策定：
   - 短期的な対応策
   - 中長期的な根本対策
   - 予防策の検討
   - 影響度とリスクの評価

5. 実装と検証：
   - 修正コードの実装
   - テスト戦略の策定
   - 段階的デプロイメント
   - 効果測定と監視

問題解決後は、同様の問題の再発防止策と監視体制の改善も提案してください。`,
    category: "debugging",
    tags: ["production", "troubleshooting", "root-cause", "monitoring"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "緊急度を考慮して",
      "データ重視で証拠に基づいて",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "performance-bottleneck-analysis",
    title: "パフォーマンスボトルネック分析",
    description:
      "アプリケーションの性能問題を特定し、ボトルネックとなっている箇所を詳細に分析します",
    instruction: `アプリケーションのパフォーマンス問題を分析し、以下の手順で調査してください：

1. パフォーマンス測定：
   - 現在のパフォーマンス指標の収集
   - レスポンス時間の測定
   - スループットの評価
   - リソース使用量の監視

2. プロファイリング実施：
   - CPUプロファイリング
   - メモリ使用量分析
   - データベースクエリ分析
   - ネットワーク通信の監視

3. ボトルネック特定：
   - 処理時間が長い機能の特定
   - メモリリークの検出
   - 非効率なアルゴリズムの発見
   - I/O待機時間の分析

4. 最適化戦略：
   - コードレベルの最適化
   - データベースクエリ改善
   - キャッシュ戦略の導入
   - 非同期処理の活用

5. 効果測定：
   - 最適化前後の比較
   - A/Bテストの実施
   - 継続的な監視体制
   - パフォーマンス目標の設定

各最適化について、実装コスト、期待効果、リスクを評価して優先順位を決定してください。`,
    category: "debugging",
    tags: ["performance", "bottleneck", "profiling", "optimization"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "データ重視で測定しながら",
      "コスト効果を重視して",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "error-tracking-improvement",
    title: "エラートラッキング・監視強化",
    description:
      "エラー追跡システムを改善し、問題の早期発見と迅速な対応を可能にします",
    instruction: `エラートラッキングと監視システムを強化し、以下の要素を改善してください：

1. エラー収集の改善：
   - 包括的なエラーキャッチ機構
   - 構造化されたエラーログ
   - コンテキスト情報の充実
   - ユーザー行動の追跡

2. エラー分類と優先度設定：
   - エラータイプの分類体系
   - 重要度に基づく優先度設定
   - 影響範囲の自動判定
   - SLA違反の検出

3. アラートシステム：
   - 閾値ベースのアラート
   - 異常検知アルゴリズム
   - 段階的エスカレーション
   - 通知チャネルの最適化

4. ダッシュボードと可視化：
   - リアルタイム監視画面
   - トレンド分析
   - カスタムメトリクス
   - ドリルダウン機能

5. 事後分析とプロセス改善：
   - ポストモーテム分析
   - MTTR（平均復旧時間）の追跡
   - 予防策の効果測定
   - チーム学習の促進

エラー対応プロセスの自動化と、チーム全体のエラー対応能力向上も含めて提案してください。`,
    category: "debugging",
    tags: ["error-tracking", "monitoring", "alerting", "observability"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "自動化を重視して",
      "チーム運用を考慮して",
      "検討のみをドキュメントに記録",
    ],
  },

  // Refactoring Templates
  {
    id: "legacy-code-modernization",
    title: "レガシーコード現代化",
    description:
      "古いコードベースを現代的な技術スタックとベストプラクティスに移行します",
    instruction: `レガシーコードの現代化を段階的に実行し、以下の要素を改善してください：

1. 現状分析：
   - 技術的負債の評価
   - 依存関係の棚卸し
   - セキュリティリスクの特定
   - パフォーマンス問題の洗い出し

2. 移行戦略の策定：
   - Strangler Figパターンの適用
   - 段階的移行計画
   - リスク評価と軽減策
   - ロールバック戦略

3. コード品質の向上：
   - 静的コード解析の導入
   - コーディング規約の統一
   - テストカバレッジの向上
   - ドキュメントの整備

4. 技術スタックの更新：
   - フレームワークのアップグレード
   - 新しいライブラリの導入
   - アーキテクチャパターンの適用
   - CI/CDパイプラインの構築

5. 継続的改善：
   - 技術的負債の継続的監視
   - コード品質メトリクス
   - チーム知識の共有
   - 新技術導入プロセス

ビジネス影響を最小化しながら、段階的に安全に移行できる計画を作成してください。`,
    category: "refactoring",
    tags: ["legacy", "modernization", "migration", "technical-debt"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "リスク管理を重視して",
      "段階的アプローチで",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "code-duplication-elimination",
    title: "コード重複排除・共通化",
    description:
      "重複したコードを特定し、適切な抽象化と共通化を通じてメンテナンス性を向上させます",
    instruction: `コードベース内の重複を特定し、以下のアプローチで排除してください：

1. 重複コードの検出：
   - 静的解析ツールによる重複検出
   - 類似機能の特定
   - コピー&ペーストコードの発見
   - パターンマッチングによる分析

2. 重複の分類と評価：
   - 構造的重複 vs 偶然の重複
   - 重複の規模と影響度
   - 共通化の難易度評価
   - リファクタリングの価値判定

3. 抽象化戦略：
   - 関数・メソッドの抽出
   - 共通ライブラリの作成
   - デザインパターンの適用
   - ポリモーフィズムの活用

4. 実装とテスト：
   - 段階的リファクタリング
   - テストケースの作成
   - 回帰テストの実施
   - パフォーマンス影響の確認

5. 予防策の導入：
   - コードレビューガイドライン
   - 共通コンポーネントの周知
   - アーキテクチャガイドライン
   - 継続的な監視体制

DRY原則を適切に適用し、過度な抽象化を避けながら保守性を向上させてください。`,
    category: "refactoring",
    tags: ["duplication", "dry-principle", "abstraction", "maintainability"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "バランスを重視して",
      "長期保守性を考慮して",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "method-extraction-refactoring",
    title: "メソッド抽出・関数分割リファクタリング",
    description:
      "大きすぎる関数やメソッドを適切な単位に分割し、可読性と保守性を向上させます",
    instruction: `長大な関数・メソッドを分析し、以下の手順でリファクタリングしてください：

1. 対象関数の特定：
   - 行数が多い関数の特定
   - 複雑度（サイクロマティック複雑度）の測定
   - 複数の責任を持つ関数の発見
   - ネストが深い処理の特定

2. 分割ポイントの分析：
   - 単一責任の原則に基づく分割
   - 論理的な機能単位での切り出し
   - データの流れに基づく境界設定
   - 再利用可能な部分の特定

3. メソッド抽出の実行：
   - 適切な関数名の命名
   - パラメータと戻り値の設計
   - エラーハンドリングの分離
   - 副作用の明確化

4. コード品質の向上：
   - 単体テストの作成
   - 可読性の向上
   - デバッグのしやすさ改善
   - 関数の再利用性向上

5. 継続的改善：
   - コード複雑度の監視
   - 関数サイズのガイドライン
   - レビュープロセスの改善
   - リファクタリングの習慣化

各関数について、分割前後の比較と改善効果を明確に示してください。`,
    category: "refactoring",
    tags: ["method-extraction", "function-splitting", "readability", "complexity"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "可読性を最重要視して",
      "テスタビリティを考慮して",
      "検討のみをドキュメントに記録",
    ],
  },

  // Architecture Templates
  {
    id: "microservices-architecture-design",
    title: "マイクロサービスアーキテクチャ設計",
    description:
      "モノリシックアプリケーションをマイクロサービスアーキテクチャに移行する設計を提案します",
    instruction: `マイクロサービスアーキテクチャへの移行について、以下の観点から設計してください：

1. ドメイン分析とサービス分割：
   - ビジネスドメインの特定
   - 境界付けられたコンテキストの定義
   - サービス境界の設計
   - データ整合性の考慮

2. サービス間通信：
   - 同期vs非同期通信の選択
   - APIゲートウェイの設計
   - メッセージキューの活用
   - 分散トランザクションの処理

3. データ管理戦略：
   - Database per Serviceパターン
   - データ一貫性の確保
   - イベントソーシング
   - CQRS（Command Query Responsibility Segregation）

4. 運用とモニタリング：
   - 分散トレーシング
   - 集約ログ管理
   - ヘルスチェック機構
   - サーキットブレーカーパターン

5. デプロイメントと拡張性：
   - コンテナ化戦略
   - オーケストレーション（Kubernetes等）
   - CI/CDパイプライン
   - 自動スケーリング

移行のリスクとコスト、段階的移行計画も含めて総合的な提案を行ってください。`,
    category: "architecture",
    tags: ["microservices", "domain-driven-design", "distributed-systems", "scalability"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "スケーラビリティを重視して",
      "運用性を考慮して",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "event-driven-architecture",
    title: "イベント駆動アーキテクチャ設計",
    description:
      "イベント駆動アーキテクチャを導入し、疎結合で拡張性の高いシステムを設計します",
    instruction: `イベント駆動アーキテクチャの導入について、以下の要素を設計してください：

1. イベントモデリング：
   - ビジネスイベントの特定
   - イベントストリームの設計
   - イベントスキーマの定義
   - イベントバージョニング戦略

2. イベントストア設計：
   - イベントの永続化方法
   - スナップショット戦略
   - イベントの検索・クエリ機能
   - データ保持ポリシー

3. イベント処理パターン：
   - イベントソーシング
   - CQRSパターンの適用
   - サガパターン
   - イベント集約パターン

4. メッセージング基盤：
   - イベントブローカーの選択
   - メッセージルーティング
   - 順序保証とべき等性
   - デッドレターキューの処理

5. 運用と監視：
   - イベントの可視化
   - 処理遅延の監視
   - エラーハンドリング
   - デバッグとトラブルシューティング

既存システムとの統合方法と段階的移行戦略も含めて提案してください。`,
    category: "architecture",
    tags: ["event-driven", "event-sourcing", "cqrs", "messaging"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "イベント整合性を重視して",
      "運用の複雑さを考慮して",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "database-architecture-optimization",
    title: "データベースアーキテクチャ最適化",
    description:
      "データベース設計を最適化し、パフォーマンス、拡張性、可用性を向上させます",
    instruction: `データベースアーキテクチャを包括的に最適化し、以下の要素を改善してください：

1. データモデル最適化：
   - ER図の見直し
   - 正規化/非正規化の最適化
   - インデックス戦略
   - パーティショニング設計

2. パフォーマンス最適化：
   - スロークエリの特定と改善
   - クエリ実行計画の分析
   - 統計情報の最適化
   - メモリ設定の調整

3. 可用性とスケーラビリティ：
   - レプリケーション設計
   - シャーディング戦略
   - 負荷分散の実装
   - フェイルオーバー機構

4. データ管理とガバナンス：
   - バックアップ・リストア戦略
   - データアーカイブポリシー
   - データセキュリティ
   - アクセス制御

5. 監視とメンテナンス：
   - パフォーマンス監視
   - 容量計画
   - 定期メンテナンス計画
   - 障害対応手順

現在のワークロードに基づいた具体的な改善案と実装ロードマップを提示してください。`,
    category: "architecture",
    tags: ["database", "performance", "scalability", "data-modeling"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "データ整合性を重視して",
      "運用コストを考慮して",
      "検討のみをドキュメントに記録",
    ],
  },

  // CI/CD Templates
  {
    id: "github-actions-workflow-optimization",
    title: "GitHub Actions ワークフロー最適化",
    description:
      "GitHub Actionsワークフローを最適化し、CI/CDパイプラインの効率性とセキュリティを向上させます",
    instruction: `GitHub Actionsワークフローを包括的に最適化し、以下の観点から改善してください：

1. パフォーマンス最適化：
   - 並列実行の最大活用
   - キャッシュ戦略の改善
   - 不要なステップの除去
   - ビルド時間の短縮

2. セキュリティ強化：
   - シークレット管理の改善
   - 権限の最小化（permissions設定）
   - サードパーティアクションの検証
   - 脆弱性スキャンの統合

3. 可用性と信頼性：
   - エラーハンドリングの改善
   - リトライ機構の実装
   - 失敗通知の最適化
   - 条件分岐の最適化

4. コスト最適化：
   - ランナー使用時間の削減
   - 効率的なリソース利用
   - 不要なワークフロー実行の排除
   - セルフホストランナーの検討

5. 保守性向上：
   - ワークフローの再利用性
   - 設定の外部化
   - ドキュメントの整備
   - バージョン管理戦略

各改善について、具体的な実装例とベストプラクティスを示してください。`,
    category: "ci-cd",
    tags: ["github-actions", "ci-cd", "automation", "security", "performance"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "セキュリティ重視で慎重に",
      "コスト効率を考慮して",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "deployment-strategy-design",
    title: "デプロイメント戦略設計",
    description:
      "安全で効率的なデプロイメント戦略を設計し、ゼロダウンタイムデプロイメントを実現します",
    instruction: `プロダクションデプロイメント戦略を設計し、以下の要素を含めてください：

1. デプロイメントパターンの選択：
   - Blue-Greenデプロイメント
   - カナリアリリース
   - ローリングアップデート
   - フィーチャーフラグの活用

2. 環境管理：
   - 開発・ステージング・本番環境の設計
   - 環境間の一貫性確保
   - Infrastructure as Code
   - 設定管理の自動化

3. リリース自動化：
   - CI/CDパイプラインの構築
   - 自動テストの統合
   - 品質ゲートの設定
   - 承認プロセスの自動化

4. 監視とロールバック：
   - デプロイメント監視
   - ヘルスチェック機構
   - 自動ロールバック
   - 手動介入ポイント

5. リスク管理：
   - 障害影響の最小化
   - 緊急時対応手順
   - チーム間のコミュニケーション
   - 学習とプロセス改善

現在のアプリケーション特性に最適なデプロイメント戦略を提案してください。`,
    category: "ci-cd",
    tags: ["deployment", "blue-green", "canary", "rollback"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "リスク管理を最重要視して",
      "運用性を考慮して",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "automated-testing-pipeline",
    title: "自動テストパイプライン構築",
    description:
      "包括的な自動テストパイプラインを構築し、品質保証を自動化します",
    instruction: `自動テストパイプラインを構築し、以下のテスト戦略を実装してください：

1. テストピラミッドの実装：
   - ユニットテストの充実
   - 統合テストの設計
   - E2Eテストの最適化
   - テストバランスの調整

2. テスト環境の自動化：
   - テストデータの管理
   - テスト環境のプロビジョニング
   - 依存サービスのモック化
   - 環境のクリーンアップ

3. テスト実行の最適化：
   - 並列テスト実行
   - テストの優先順位付け
   - フレイキーテストの対策
   - テスト実行時間の短縮

4. 品質メトリクスの収集：
   - テストカバレッジの監視
   - テスト結果の可視化
   - 品質トレンドの分析
   - 品質ゲートの設定

5. 障害対応とメンテナンス：
   - テスト失敗時の対応
   - テストコードの保守
   - テスト環境のメンテナンス
   - テスト戦略の継続的改善

テスト自動化のROIと継続的な改善プロセスも含めて提案してください。`,
    category: "ci-cd",
    tags: ["automated-testing", "test-pyramid", "quality-assurance", "ci-cd"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "品質を最重要視して",
      "メンテナンス性を考慮して",
      "検討のみをドキュメントに記録",
    ],
  },

  // Testing Templates
  {
    id: "test-coverage-analysis-improvement",
    title: "テストカバレッジ分析・改善",
    description:
      "テストカバレッジを詳細に分析し、効果的なテスト戦略で品質を向上させます",
    instruction: `テストカバレッジを包括的に分析し、以下の手順で改善してください：

1. 現状分析：
   - コードカバレッジの測定
   - ブランチカバレッジの評価
   - 機能カバレッジの確認
   - リスクエリアの特定

2. カバレッジギャップの特定：
   - 未テスト機能の洗い出し
   - クリティカルパスの確認
   - エラーハンドリングの検証
   - エッジケースの網羅性

3. テスト戦略の策定：
   - 優先度に基づくテスト計画
   - テストタイプの最適な組み合わせ
   - テストピラミッドの適用
   - テストデータ戦略

4. テスト実装：
   - ユニットテストの追加
   - 統合テストの強化
   - E2Eテストシナリオ
   - パフォーマンステスト

5. 継続的改善：
   - カバレッジ目標の設定
   - 品質メトリクスの監視
   - テストメンテナンス戦略
   - チーム教育とガイドライン

テストROIを考慮した効率的なテスト戦略を提案してください。`,
    category: "testing",
    tags: ["test-coverage", "quality-assurance", "testing-strategy", "metrics"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "品質重視で厳格に",
      "ROIを考慮して",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "e2e-testing-framework-setup",
    title: "E2Eテストフレームワーク構築",
    description:
      "End-to-Endテストフレームワークを構築し、ユーザーシナリオを自動化します",
    instruction: `E2Eテストフレームワークを構築し、以下の要素を実装してください：

1. テストフレームワーク選定：
   - 技術スタックに適したツール選択
   - パフォーマンスと信頼性の評価
   - メンテナンス性の考慮
   - チームスキルとの適合性

2. テストシナリオ設計：
   - ユーザージャーニーマッピング
   - クリティカルパスの特定
   - ハッピーパス vs エラーパス
   - ビジネス価値の高いシナリオ

3. テスト環境構築：
   - テスト環境の自動化
   - テストデータ管理
   - 外部依存の処理
   - 環境のクリーンアップ

4. テスト実行基盤：
   - CI/CDとの統合
   - 並列実行の実装
   - 失敗時の詳細レポート
   - スクリーンショット・動画記録

5. メンテナンスと運用：
   - Page Object Modelの適用
   - 要素選択戦略
   - フレイキーテスト対策
   - テストコードの品質管理

長期的に保守可能なE2Eテスト戦略を提案してください。`,
    category: "testing",
    tags: ["e2e-testing", "automation", "user-scenarios", "quality-assurance"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "長期保守性を重視して",
      "実行速度を考慮して",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "unit-test-quality-improvement",
    title: "ユニットテスト品質向上",
    description:
      "ユニットテストの品質を向上させ、効果的なテスト駆動開発を推進します",
    instruction: `ユニットテストの品質を向上させ、以下の観点から改善してください：

1. テストコード品質分析：
   - 既存テストコードのレビュー
   - テストの意図明確性
   - テストの独立性確認
   - テストの実行速度評価

2. テスト設計改善：
   - Given-When-Then構造の適用
   - テストケースの網羅性向上
   - 境界値テストの充実
   - モック・スタブの適切な使用

3. テスタビリティの向上：
   - 依存性注入の適用
   - テスト可能な設計への改善
   - 副作用の分離
   - テスト用インターface定義

4. テストツールの活用：
   - テストフレームワークの最適化
   - アサーションライブラリの活用
   - テストデータビルダーの導入
   - パラメータ化テストの適用

5. TDD/BDDの推進：
   - テスト駆動開発の導入
   - ビヘイビア駆動開発の適用
   - リファクタリングサイクル
   - チーム教育とガイドライン

効果的なユニットテスト文化を根付かせる戦略も含めて提案してください。`,
    category: "testing",
    tags: ["unit-testing", "tdd", "test-quality", "refactoring"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "TDD文化を重視して",
      "チーム教育を考慮して",
      "検討のみをドキュメントに記録",
    ],
  },

  // Security Templates
  {
    id: "security-vulnerability-audit",
    title: "セキュリティ脆弱性監査",
    description:
      "包括的なセキュリティ監査を実施し、脆弱性を特定して対策を提案します",
    instruction: `セキュリティ脆弱性の包括的監査を実施し、以下の項目をチェックしてください：

1. 依存関係セキュリティ：
   - サードパーティライブラリの脆弱性チェック
   - ライセンス互換性の確認
   - セキュリティアドバイザリの監視
   - 定期的な更新プロセス

2. アプリケーションセキュリティ：
   - OWASP Top 10の検証
   - 入力値検証・サニタイゼーション
   - SQLインジェクション対策
   - XSS（クロスサイトスクリプティング）対策

3. 認証・認可セキュリティ：
   - パスワードポリシーの評価
   - セッション管理の安全性
   - 多要素認証の実装状況
   - アクセス制御の妥当性

4. インフラストラクチャセキュリティ：
   - サーバー設定の安全性
   - ネットワークセキュリティ
   - 暗号化の実装状況
   - ログ・監査機能

5. データ保護：
   - 個人情報の取り扱い
   - データ暗号化
   - バックアップセキュリティ
   - データ漏洩対策

各脆弱性についてリスクレベルを評価し、優先度付きの対策計画を提示してください。`,
    category: "security",
    tags: ["vulnerability", "security-audit", "owasp", "penetration-testing"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "リスク重視で慎重に",
      "OWASP基準に準拠して",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "authentication-authorization-review",
    title: "認証・認可システムレビュー",
    description:
      "認証・認可システムを詳細にレビューし、セキュリティを強化します",
    instruction: `認証・認可システムを包括的にレビューし、以下の観点から改善してください：

1. 認証メカニズムの評価：
   - 認証方式の適切性
   - パスワードポリシー
   - 多要素認証の実装
   - 生体認証の活用

2. セッション管理：
   - セッションIDの生成・管理
   - セッションタイムアウト
   - セッション固定攻撃対策
   - セッション無効化処理

3. 認可制御：
   - ロールベースアクセス制御（RBAC）
   - 属性ベースアクセス制御（ABAC）
   - 最小権限の原則
   - 権限昇格の防止

4. トークン管理：
   - JWTの適切な使用
   - リフレッシュトークン戦略
   - トークンの無効化
   - 漏洩時の対応策

5. セキュリティ監視：
   - ログイン試行の監視
   - 異常なアクセスパターン検知
   - セキュリティイベントの記録
   - インシデント対応

現在のセキュリティ要件に基づいた改善計画を策定してください。`,
    category: "security",
    tags: ["authentication", "authorization", "session-management", "access-control"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "ゼロトラスト原則で",
      "ユーザビリティも考慮して",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "data-privacy-compliance",
    title: "データプライバシー・コンプライアンス対応",
    description:
      "GDPR、CCPA等のデータ保護規制への対応状況を評価し、コンプライアンス体制を構築します",
    instruction: `データプライバシーとコンプライアンス対応を評価し、以下の要素を確認してください：

1. 規制要件の分析：
   - 適用される規制の特定（GDPR、CCPA、個人情報保護法等）
   - 規制要件の詳細分析
   - コンプライアンス現状評価
   - ギャップ分析

2. データ分類と管理：
   - 個人データの分類・棚卸し
   - データフローの可視化
   - データ保持ポリシー
   - データ削除・匿名化

3. プライバシー・バイ・デザイン：
   - 設計段階でのプライバシー考慮
   - データ最小化の原則
   - 目的制限の実装
   - 透明性の確保

4. 権利対応の仕組み：
   - アクセス権（データポータビリティ）
   - 訂正・削除権
   - 処理停止権
   - 自動意思決定の開示

5. ガバナンスと監視：
   - プライバシーポリシーの整備
   - データ保護責任者（DPO）の設置
   - 定期的な監査
   - インシデント対応手順

法的リスクを最小化する包括的なプライバシー対応計画を策定してください。`,
    category: "security",
    tags: ["privacy", "gdpr", "compliance", "data-protection"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",  
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "法的リスクを最重要視して",
      "ビジネス継続性を考慮して",
      "検討のみをドキュメントに記録",
    ],
  },

  // Performance Templates
  {
    id: "application-performance-optimization",
    title: "アプリケーションパフォーマンス最適化",
    description:
      "アプリケーション全体のパフォーマンスを詳細に分析し、ボトルネックを解消します",
    instruction: `アプリケーションパフォーマンスを包括的に最適化し、以下の観点から改善してください：

1. パフォーマンス測定・分析：
   - レスポンス時間の詳細測定
   - スループットの評価
   - リソース使用量の監視
   - ユーザー体験指標（Core Web Vitals等）

2. フロントエンド最適化：
   - バンドルサイズの削減
   - 画像・アセット最適化
   - レイジーローディング実装
   - レンダリングパフォーマンス向上

3. バックエンド最適化：
   - データベースクエリ最適化
   - キャッシュ戦略の実装
   - 非同期処理の活用
   - マイクロサービス間通信の最適化

4. インフラストラクチャ最適化：
   - CDN活用戦略
   - ロードバランシング
   - オートスケーリング
   - ネットワーク最適化

5. 継続的なパフォーマンス管理：
   - パフォーマンス監視体制
   - SLI/SLO設定
   - アラート設定
   - 継続的改善プロセス

具体的な改善案と期待効果、ROI分析を含めて提案してください。`,
    category: "performance",
    tags: ["performance", "optimization", "bottleneck", "monitoring"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "データ重視で測定しながら",
      "ユーザー体験を最重要視して",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "database-performance-tuning",
    title: "データベースパフォーマンスチューニング",
    description:
      "データベースのパフォーマンスを詳細に分析し、クエリ最適化とシステム調整を実施します",
    instruction: `データベースパフォーマンスを最適化し、以下の手順で改善してください：

1. パフォーマンス現状分析：
   - スロークエリログの分析
   - 実行計画の詳細確認
   - リソース使用状況の監視
   - ボトルネックの特定

2. クエリ最適化：
   - インデックス戦略の見直し
   - クエリの書き換え
   - JOINの最適化
   - サブクエリの改善

3. データベース設計最適化：
   - テーブル構造の見直し
   - 非正規化の検討
   - パーティショニング実装
   - データ型の最適化

4. システム設定調整：
   - メモリ設定の最適化
   - I/O設定の調整
   - 接続プール設定
   - 統計情報の更新

5. 運用監視体制：
   - パフォーマンス監視ダッシュボード
   - 定期メンテナンス計画
   - 容量計画
   - 障害対応手順

データベース固有の特性を考慮した最適化戦略を提案してください。`,
    category: "performance",
    tags: ["database", "query-optimization", "indexing", "tuning"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "データベース固有性を重視して",
      "運用コストを考慮して", 
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "caching-strategy-implementation", 
    title: "キャッシュ戦略実装・最適化",
    description:
      "効果的なキャッシュ戦略を設計・実装し、アプリケーションパフォーマンスを大幅に向上させます",
    instruction: `キャッシュ戦略を包括的に設計・実装し、以下の要素を含めてください：

1. キャッシュ要件分析：
   - アクセスパターンの分析
   - データの読み書き頻度
   - データの鮮度要件
   - パフォーマンス目標設定

2. キャッシュレイヤー設計：
   - ブラウザキャッシュ
   - CDNキャッシュ
   - アプリケーションレベルキャッシュ
   - データベースキャッシュ

3. キャッシュパターンの実装：
   - Cache-Asideパターン
   - Write-ThroughやWrite-Behindパターン
   - Refresh-Aheadパターン
   - Circuit Breakerとの連携

4. キャッシュ無効化戦略：
   - TTL（Time To Live）設定
   - イベント駆動無効化
   - タグベース無効化
   - 階層的無効化

5. 運用と監視：
   - キャッシュヒット率の監視
   - メモリ使用量の管理
   - ホットスポット対策
   - パフォーマンス測定

データ整合性を保ちながら最大のパフォーマンス向上を実現する戦略を提案してください。`,
    category: "performance",
    tags: ["caching", "redis", "memcached", "performance"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "データ整合性を重視して",
      "スケーラビリティを考慮して",
      "検討のみをドキュメントに記録",
    ],
  },

  // Documentation Templates
  {
    id: "comprehensive-documentation-overhaul",
    title: "包括的ドキュメント刷新",
    description:
      "プロジェクト全体のドキュメントを体系的に見直し、包括的で使いやすいドキュメント体系を構築します",
    instruction: `プロジェクトドキュメントを包括的に刷新し、以下の要素を含めてください：

1. ドキュメント現状監査：
   - 既存ドキュメントの棚卸し
   - 内容の正確性確認
   - 使いやすさの評価
   - 不足している部分の特定

2. ドキュメント体系設計：
   - 情報アーキテクチャの設計
   - ユーザー別ドキュメント分類
   - ナビゲーション構造
   - 検索性の向上

3. コンテンツ作成・改善：
   - 新規ユーザー向けクイックスタート
   - 詳細な開発者ガイド
   - APIリファレンス
   - トラブルシューティングガイド

4. 可視化とマルチメディア：
   - アーキテクチャ図の作成
   - フロー図・シーケンス図
   - スクリーンショット・動画
   - インタラクティブサンプル

5. ドキュメント管理プロセス：
   - 更新プロセスの自動化
   - レビュー・承認フロー
   - バージョン管理
   - メトリクス収集・改善

長期的に維持可能な高品質ドキュメント体系を構築してください。`,
    category: "documentation",
    tags: ["documentation", "user-guide", "developer-docs", "knowledge-management"],
    directions: [
      "詳細な説明を重視して",
      "簡潔性とのバランスを取って",
      "実例・サンプルを豊富に",
      "構造を体系的に整理して",
      "視覚的要素を効果的に活用",
      "ユーザビリティを最重要視",
      "継続的更新を考慮して",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "api-documentation-enhancement",
    title: "API ドキュメント強化",
    description:
      "API ドキュメントを大幅に改善し、開発者体験を向上させる包括的なAPIドキュメントを作成します",
    instruction: `API ドキュメントを強化し、以下の要素を含む包括的なドキュメントを作成してください：

1. API 概要とガイド：
   - API の目的と価値提案
   - 認証・認可方法
   - レート制限とクォータ
   - 基本的な使用例

2. エンドポイント詳細仕様：
   - 全エンドポイントの完全な仕様
   - リクエスト・レスポンス例
   - パラメータの詳細説明
   - エラーレスポンスの説明

3. SDK とクライアントライブラリ：
   - 各言語での使用例
   - SDK のインストール・設定
   - ベストプラクティス
   - 実践的なサンプルコード

4. 高度な使用例：
   - 複雑なワークフローの例
   - 統合パターン
   - パフォーマンス最適化
   - エラーハンドリング戦略

5. 開発者リソース：
   - テスト環境とサンドボックス
   - Postman コレクション
   - FAQ とトラブルシューティング
   - コミュニティとサポート

開発者が迅速に理解し、効果的にAPIを活用できるドキュメントを作成してください。`,
    category: "documentation", 
    tags: ["api-docs", "developer-experience", "openapi", "swagger"],
    directions: [
      "開発者体験を最重要視",
      "実用的なサンプルを豊富に",
      "段階的学習を考慮して",
      "インタラクティブ要素を活用",
      "自動生成との連携を重視",
      "多言語対応を考慮して",
      "継続的改善を念頭に",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "onboarding-documentation-creation",
    title: "オンボーディングドキュメント作成",
    description:
      "新しいチームメンバーが迅速にプロジェクトに参加できる包括的なオンボーディングドキュメントを作成します",
    instruction: `新規メンバー向けの包括的なオンボーディングドキュメントを作成し、以下の要素を含めてください：

1. プロジェクト概要：
   - ビジネス目標と価値提案
   - システムアーキテクチャ概要
   - 主要機能とユーザーフロー
   - 技術スタックの説明

2. 開発環境セットアップ：
   - 必要なツールとソフトウェア
   - 段階的なセットアップ手順
   - よくある問題と解決策
   - 環境確認のチェックリスト

3. コードベース理解：
   - ディレクトリ構造の説明
   - 重要なファイル・モジュール
   - 設計パターンとコーディング規約
   - データフロー・制御フロー

4. 開発ワークフロー：
   - Git ワークフローとブランチ戦略
   - コードレビュープロセス
   - テスト・デプロイメント手順
   - 品質保証プロセス

5. チーム・組織情報：
   - チーム構成と役割
   - コミュニケーションチャネル
   - 定期的なミーティング
   - ドキュメントとリソース

新しいメンバーが1週間で生産的に貢献できるオンボーディング体験を設計してください。`,
    category: "documentation",
    tags: ["onboarding", "team-guide", "setup", "knowledge-transfer"],
    directions: [
      "段階的学習を重視して",
      "実践的な手順を明確に",
      "チェックリスト形式で",
      "トラブルシューティングを含めて",
      "メンター制度と連携して",
      "継続的フィードバックを組み込み",
      "個人の学習スタイルを考慮",
      "検討のみをドキュメントに記録",
    ],
  },

  // Maintenance Templates
  {
    id: "dependency-management-strategy",
    title: "依存関係管理戦略構築",
    description:
      "プロジェクトの依存関係を効率的に管理し、セキュリティとパフォーマンスを継続的に最適化する戦略を構築します",
    instruction: `依存関係管理の包括的戦略を構築し、以下の要素を含めてください：

1. 現状分析と棚卸し：
   - 全依存関係の詳細調査
   - バージョン互換性の確認
   - ライセンス互換性の評価
   - セキュリティ脆弱性の確認

2. 更新戦略の策定：
   - 段階的更新計画
   - 互換性テスト戦略
   - ロールバック計画
   - 影響範囲の評価

3. 自動化システム構築：
   - 依存関係監視の自動化
   - セキュリティアラートシステム
   - 自動更新パイプライン
   - 品質ゲート設定

4. ガバナンスとポリシー：
   - 新規依存関係の承認プロセス
   - バージョン固定ポリシー
   - セキュリティ基準
   - 技術的負債の管理

5. 継続的改善：
   - メトリクス収集・分析
   - 定期的なレビュープロセス
   - チーム教育・ガイドライン
   - ツール・プロセス改善

長期的な保守性とセキュリティを両立する管理戦略を提案してください。`,
    category: "maintenance",
    tags: ["dependencies", "security", "automation", "governance"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "リスク管理を最重要視",
      "自動化を積極的に活用",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "technical-debt-management",
    title: "技術的負債管理・解消計画",
    description:
      "技術的負債を体系的に特定・評価し、段階的な解消計画を策定して実行します",
    instruction: `技術的負債を包括的に管理し、以下の手順で解消計画を策定してください：

1. 技術的負債の特定・分類：
   - コード品質の問題
   - アーキテクチャの問題
   - パフォーマンスの問題
   - セキュリティの問題
   - ドキュメントの不備

2. 影響度・優先度評価：
   - ビジネス影響度の評価
   - 開発効率への影響
   - 保守コストの算出
   - リスクレベルの判定

3. 解消戦略の策定：
   - 段階的改善計画
   - リソース配分計画
   - 実装スケジュール
   - リスク軽減策

4. 実装とモニタリング：
   - 改善作業の実行
   - 進捗管理と品質確認
   - 効果測定
   - ステークホルダー報告

5. 予防策と継続的改善：
   - 技術的負債蓄積の防止
   - 定期的な評価プロセス
   - チーム教育・意識向上
   - ツール・プロセス改善

技術的負債の解消によるROIを明確にし、継続的な品質向上を実現してください。`,
    category: "maintenance",
    tags: ["technical-debt", "refactoring", "code-quality", "planning"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "ROI を重視して",
      "長期的価値を考慮して",
      "検討のみをドキュメントに記録",
    ],
  },
  {
    id: "monitoring-observability-enhancement",
    title: "監視・可観測性強化",
    description:
      "システムの監視体制を強化し、問題の早期発見と迅速な対応を可能にする可観測性を構築します",
    instruction: `システムの監視・可観測性を強化し、以下の要素を実装してください：

1. 監視戦略の設計：
   - SLI/SLO/SLA の定義
   - 重要なメトリクスの特定
   - アラート戦略の策定
   - 監視対象の階層化

2. メトリクス収集・分析：
   - アプリケーションメトリクス
   - インフラストラクチャメトリクス
   - ビジネスメトリクス
   - カスタムメトリクス

3. ログ管理強化：
   - 構造化ログの実装
   - ログ集約・検索システム
   - ログ分析・アラート
   - ログ保持ポリシー

4. 分散トレーシング：
   - リクエストフローの可視化
   - パフォーマンスボトルネック特定
   - エラー原因の特定
   - サービス間依存関係の把握

5. ダッシュボード・アラート：
   - 役割別ダッシュボード
   - リアルタイム監視画面
   - 段階的アラート設定
   - オンコール体制

障害の早期発見と迅速な復旧を実現する監視体制を構築してください。`,
    category: "maintenance",
    tags: ["monitoring", "observability", "alerting", "sli-slo"],
    directions: [
      "ステップバイステップで論理的に",
      "批判的思考で詳細に検証",
      "実践的かつ具体的に",
      "包括的で網羅的に",
      "効率重視で優先度順に",
      "信頼性を最重要視",
      "運用効率を考慮して",
      "検討のみをドキュメントに記録",
    ],
  },
];
