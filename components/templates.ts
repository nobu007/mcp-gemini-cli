export interface CustomInstructionTemplate {
  id: string;
  title: string;
  description: string;
  instruction: string;
  category:
    | "ci-cd"
    | "testing"
    | "code-review"
    | "security"
    | "optimization"
    | "documentation";
  tags: string[];
}

export const customInstructionTemplates: CustomInstructionTemplate[] = [
  {
    id: "github-actions-review",
    title: "GitHub Actions ワークフローレビュー",
    description:
      "全てのGitHub Actionsワークフローをレビューして改善点を提案します",
    instruction: `プロジェクト内の全てのGitHub Actionsワークフローファイル（.github/workflows/*.yml, *.yaml）を確認し、以下の観点から改善点を提案してください：

1. セキュリティの観点：
   - シークレットの適切な管理
   - 権限の最小化（permissions設定）
   - 信頼できないアクションの使用チェック

2. パフォーマンスの観点：
   - キャッシュの活用
   - 並列実行の最適化
   - 不要なステップの除去

3. 保守性の観点：
   - ワークフローの複雑さの評価
   - 再利用可能な部分の特定
   - エラーハンドリングの改善

4. ベストプラクティス：
   - アクションのバージョン固定
   - 環境変数の適切な使用
   - 条件分岐の最適化

各ワークフローファイルを分析し、具体的な改善案とその理由をコードとともに提示してください。`,
    category: "ci-cd",
    tags: ["github-actions", "ci", "security", "performance"],
  },
  {
    id: "test-coverage-improvement",
    title: "テストカバレッジ向上",
    description:
      "コードベースのテストカバレッジを分析し、テストが不足している部分を特定して改善します",
    instruction: `プロジェクトのテストカバレッジを分析し、以下の作業を実行してください：

1. 現在のテスト状況の把握：
   - 既存のテストファイルとテストフレームワークの確認
   - テストカバレッジの現状分析（可能であればカバレッジレポート生成）

2. テストが不足している領域の特定：
   - 重要な機能でテストが不足している部分
   - エッジケースやエラーハンドリングのテスト不足
   - 統合テストが必要な部分

3. テスト改善の実装：
   - 不足しているユニットテストの追加
   - 統合テストの実装
   - モックやスタブの適切な使用

4. テスト戦略の提案：
   - テストピラミッドに基づいた戦略
   - 継続的なテスト品質維持のための提案

優先度の高い順にテストを実装し、各テストの目的と重要性を説明してください。`,
    category: "testing",
    tags: ["testing", "coverage", "quality-assurance", "unit-test"],
  },
  {
    id: "code-security-audit",
    title: "コードセキュリティ監査",
    description:
      "セキュリティの観点からコードベースを監査し、脆弱性や改善点を特定します",
    instruction: `コードベースのセキュリティ監査を実行し、以下の項目をチェックしてください：

1. 依存関係のセキュリティ：
   - 古いバージョンや既知の脆弱性を持つパッケージの特定
   - package.jsonやlock fileの分析
   - セキュリティアドバイザリのチェック

2. 入力値検証とサニタイゼーション：
   - ユーザー入力の適切な検証
   - SQLインジェクション、XSS等の脆弱性チェック
   - 入力値のサニタイゼーション実装状況

3. 認証・認可の実装：
   - 認証メカニズムの適切性
   - セッション管理の安全性
   - アクセス制御の実装状況

4. 機密情報の管理：
   - ハードコードされたシークレットやAPIキーの確認
   - 環境変数の適切な使用
   - ログ出力における機密情報の漏洩チェック

5. その他のセキュリティベストプラクティス：
   - HTTPS通信の強制
   - セキュリティヘッダーの設定
   - エラーメッセージからの情報漏洩防止

発見した問題点について、リスクレベルとともに具体的な修正案を提示してください。`,
    category: "security",
    tags: ["security", "vulnerability", "audit", "best-practices"],
  },
  {
    id: "performance-optimization",
    title: "パフォーマンス最適化",
    description:
      "アプリケーションのパフォーマンスを分析し、ボトルネックを特定して最適化します",
    instruction: `アプリケーションのパフォーマンスを分析し、以下の観点から最適化を実行してください：

1. フロントエンド最適化（該当する場合）：
   - バンドルサイズの分析と削減
   - 不要なre-renderの特定と修正
   - 画像やアセットの最適化
   - レイジーローディングの実装

2. バックエンド最適化（該当する場合）：
   - データベースクエリの最適化
   - キャッシュ戦略の実装
   - APIレスポンス時間の改善
   - メモリ使用量の最適化

3. ビルドプロセスの最適化：
   - ビルド時間の短縮
   - 開発環境の高速化
   - 不要な依存関係の除去

4. 監視とメトリクス：
   - パフォーマンス指標の設定
   - 継続的な監視体制の構築
   - アラートの設定

各最適化について、実装前後のパフォーマンス比較と、実装の優先度を説明してください。`,
    category: "optimization",
    tags: ["performance", "optimization", "bundling", "caching"],
  },
  {
    id: "code-review-checklist",
    title: "コードレビューチェックリスト作成",
    description:
      "プロジェクト固有のコードレビューチェックリストを作成し、レビュープロセスを標準化します",
    instruction: `このプロジェクトに特化したコードレビューチェックリストを作成してください：

1. プロジェクト分析：
   - 使用している技術スタック
   - 既存のコーディング規約やスタイル
   - プロジェクトの特徴や要件

2. チェックリスト項目の作成：
   - 技術固有のベストプラクティス
   - セキュリティ要件
   - パフォーマンス要件
   - 可読性と保守性
   - テストの品質

3. 自動化可能な項目の特定：
   - Linter/Formatterで自動化できる項目
   - CI/CDで自動チェックできる項目
   - 手動レビューが必要な項目の明確化

4. レビュープロセスの提案：
   - レビューの段階分け
   - レビュアーの役割定義
   - レビュー完了の基準

実用的で実行可能なチェックリストを作成し、チーム内で共有しやすい形式で提示してください。`,
    category: "code-review",
    tags: ["code-review", "quality-assurance", "standards", "process"],
  },
  {
    id: "documentation-enhancement",
    title: "ドキュメント改善",
    description:
      "プロジェクトのドキュメントを見直し、不足している部分を補完して改善します",
    instruction: `プロジェクトのドキュメントを包括的にレビューし、改善してください：

1. 既存ドキュメントの評価：
   - README.mdの内容と構成
   - API ドキュメント
   - 開発者向けドキュメント
   - ユーザー向けドキュメント

2. 不足しているドキュメントの特定：
   - セットアップ・インストール手順
   - 開発環境構築手順
   - アーキテクチャ説明
   - トラブルシューティングガイド

3. ドキュメントの改善・作成：
   - わかりやすい説明の追加
   - コード例の挿入
   - 図表やスクリーンショットの提案
   - FAQ の作成

4. ドキュメント管理の仕組み：
   - ドキュメントの更新プロセス
   - バージョン管理
   - 自動生成できる部分の特定

新規ユーザーと既存開発者両方にとって有用なドキュメントを作成し、プロジェクトの理解と貢献を促進してください。`,
    category: "documentation",
    tags: ["documentation", "readme", "api-docs", "user-guide"],
  },
  {
    id: "dependency-management",
    title: "依存関係管理最適化",
    description:
      "プロジェクトの依存関係を見直し、セキュリティとパフォーマンスの観点から最適化します",
    instruction: `プロジェクトの依存関係を分析し、最適化してください：

1. 依存関係の現状分析：
   - package.json/requirements.txt等の分析
   - 直接・間接依存関係の確認
   - ライセンスの互換性チェック

2. 問題のある依存関係の特定：
   - セキュリティ脆弱性を持つパッケージ
   - 古いバージョンのパッケージ
   - 不要になった依存関係
   - サイズが大きすぎる依存関係

3. 最適化の実行：
   - 依存関係のアップデート
   - 不要な依存関係の除去
   - より軽量な代替パッケージの提案
   - dev/prod 依存関係の適切な分離

4. 継続的な管理体制の構築：
   - 定期的な依存関係更新の仕組み
   - セキュリティアラートの設定
   - ライセンス管理の自動化

各変更について、影響範囲とテスト要件を明確にし、段階的な移行計画を提示してください。`,
    category: "optimization",
    tags: ["dependencies", "security", "updates", "optimization"],
  },
];
